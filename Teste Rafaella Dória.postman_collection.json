{
	"info": {
		"_postman_id": "976aacda-2cd0-4e5c-b8d5-d9256c5c1129",
		"name": "Teste Rafaella Dória",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Busca existente",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set('ID_DO_FILME', 'tt1285016')\r",
							"pm.globals.set('API_KEY', '52ec71bf')"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Variável da responsebody\r",
							"var data = JSON.parse(responseBody);\r",
							"//Validar Titulo do Filme\r",
							"var str = 'The Social Network'\r",
							"\r",
							"if(data.Title.substr(0, 18) === str){\r",
							"    tests [\"Retorna o titulo correto: \"+ data.Title] = true\r",
							"}\r",
							"else\r",
							"{\r",
							"    tests[\"Não retorna o titulo correto\"] = false\r",
							"}\r",
							"//Validar Ano do Filme\r",
							"var year =  '2010'\r",
							"if(data.Year.substr(0, 4) === year){\r",
							"tests[\"Retorna o ano correto: \"+ data.Year] = true\r",
							"}\r",
							"else {\r",
							"    tests[\"Não retorna o ano correto\"] = false\r",
							"}\r",
							"\r",
							"//Validar Idioma do Filme\r",
							"var lang =  'English, French'\r",
							"if(data.Language.substr(0, 15) === lang){\r",
							"tests[\"Retorna o idioma correto: \" + data.Language] = true\r",
							"}\r",
							"else {\r",
							"    tests[\"Não retorna o idioma correto\"] = false\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.omdbapi.com/?i={{ID_DO_FILME}}&apikey={{API_KEY}}",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "i",
							"value": "{{ID_DO_FILME}}"
						},
						{
							"key": "apikey",
							"value": "{{API_KEY}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Busca inexistente",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set('ID_DO_FILME_notok', 'tt1017')\r",
							"pm.globals.set('API_KEY', '52ec71bf')"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Variável da responsebody\r",
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"if(data.Response === \"False\" && data.Error != null){\r",
							"//Validação do retorno da mensagem\r",
							"  var erro = 'Incorrect IMDb ID.'\r",
							"    if(data.Error.substr(0, 19) === erro){\r",
							"        tests [\"Retorna a mensagem do erro\"] = true\r",
							"    }\r",
							"    else {\r",
							"         tests [\"Retorna a mensagem do erro incorreto\"] = false\r",
							"    }\r",
							"    //Validação do retorno do Response\r",
							"    tests[\"Validação de busca de filme inexistente\"]= true\r",
							"}\r",
							"else{\r",
							"    tests[\"Validação de busca de filme inexistente não ok\"] = false\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.omdbapi.com/?i={{ID_DO_FILME_notok}}&apikey={{API_KEY}}",
					"protocol": "http",
					"host": [
						"www",
						"omdbapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "i",
							"value": "{{ID_DO_FILME_notok}}"
						},
						{
							"key": "apikey",
							"value": "{{API_KEY}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"/* Caso retorne 400 ele pula pra próxima request para não parar os testes */",
					"if(responseCode.code == 400  || responseCode.code == 404){",
					"    tests [\"O status da comunicação retorna 400 ou 404\"] = false",
					"      postman.setNextRequest();",
					"}"
				]
			}
		}
	]
}